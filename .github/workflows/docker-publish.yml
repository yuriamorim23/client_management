name: Build and Push Docker Images for Backend and Database

on:
  push:
    branches:
      - master
  pull_request:
    branches:
      - master

env:
  REGISTRY: docker.io
  BACKEND_IMAGE_NAME: yuritech/client-management-backend
  DB_IMAGE_NAME: yuritech/mysql-database

jobs:
  build:

    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Set up JDK 17
        uses: actions/setup-java@v3
        with:
          distribution: 'adopt'
          java-version: '17'

      - name: Build the backend project using Maven
        run: mvn clean package -DskipTests

      - name: Build and push Backend Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          push: true
          tags: ${{ env.REGISTRY }}/${{ env.BACKEND_IMAGE_NAME }}:latest

      - name: Create Dockerfile for MySQL
        run: |
          echo "FROM mysql:8.0" > Dockerfile-db
          echo "ENV MYSQL_ROOT_PASSWORD=123" >> Dockerfile-db
          echo "ENV MYSQL_DATABASE=client_management" >> Dockerfile-db

      - name: Build and push MySQL Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          file: Dockerfile-db
          push: true
          tags: ${{ env.REGISTRY }}/${{ env.DB_IMAGE_NAME }}:latest

      - name: Create Docker Compose file
        run: |
          echo "version: '3.8'" > docker-compose.yml
          echo "services:" >> docker-compose.yml
          echo "  mysql:" >> docker-compose.yml
          echo "    image: ${{ env.REGISTRY }}/${{ env.DB_IMAGE_NAME }}:latest" >> docker-compose.yml
          echo "    ports:" >> docker-compose.yml
          echo "      - '3307:3306'" >> docker-compose.yml
          echo "    environment:" >> docker-compose.yml
          echo "      MYSQL_ROOT_PASSWORD: 123" >> docker-compose.yml
          echo "      MYSQL_DATABASE: client_management" >> docker-compose.yml
          echo "    healthcheck:" >> docker-compose.yml
          echo "      test: ['CMD', 'mysqladmin', 'ping', '-h', 'localhost']" >> docker-compose.yml
          echo "      interval: 30s" >> docker-compose.yml
          echo "      timeout: 10s" >> docker-compose.yml
          echo "      retries: 5" >> docker-compose.yml
          echo "      start_period: 30s" >> docker-compose.yml
          echo "  client-management:" >> docker-compose.yml
          echo "    image: ${{ env.REGISTRY }}/${{ env.BACKEND_IMAGE_NAME }}:latest" >> docker-compose.yml
          echo "    ports:" >> docker-compose.yml
          echo "      - '8081:8080'" >> docker-compose.yml
          echo "    environment:" >> docker-compose.yml
          echo "      SPRING_DATASOURCE_URL: jdbc:mysql://mysql:3306/client_management" >> docker-compose.yml
          echo "      SPRING_DATASOURCE_USERNAME: root" >> docker-compose.yml
          echo "      SPRING_DATASOURCE_PASSWORD: 123" >> docker-compose.yml
          echo "    depends_on:" >> docker-compose.yml
          echo "      mysql:" >> docker-compose.yml
          echo "        condition: service_healthy" >> docker-compose.yml

      - name: Deploy with Docker Compose
        run: docker-compose up -d
