name: Build, Push, and Deploy Backend with Docker Compose

on:
  push:
    branches:
      - master
  pull_request:
    branches:
      - master

env:
  REGISTRY: docker.io
  BACKEND_IMAGE_NAME: yuritech/client-management-backend

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      # Checkout do repositório
      - name: Checkout repository
        uses: actions/checkout@v4

      # Configurar o Docker Buildx
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      # Login no Docker Hub
      - name: Log in to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      # Configurar o JDK 17
      - name: Set up JDK 17
        uses: actions/setup-java@v3
        with:
          distribution: 'adopt'
          java-version: '17'

      # Construir o backend usando Maven
      - name: Build the backend project using Maven
        run: mvn clean package -DskipTests

      # Construir e enviar a imagem do backend para o Docker Hub
      - name: Build and push Backend Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          push: true
          tags: ${{ env.REGISTRY }}/${{ env.BACKEND_IMAGE_NAME }}:latest

  deploy:
    needs: build
    runs-on: ubuntu-latest

    steps:
      # Conectar-se via SSH à instância EC2
      - name: SSH and Deploy to EC2
        uses: appleboy/ssh-action@v0.1.5
        with:
          host: ${{ secrets.AWS_EC2_IP }}
          username: ubuntu
          key: ${{ secrets.AWS_SSH_KEY }}
          script: |
            # Parar e remover containers antigos
            docker-compose down || true

            # Atualizar o repositório na instância
            cd ~/client-management || git clone https://github.com/seu-usuario/seu-repositorio.git ~/client-management
            cd ~/client-management && git pull origin master

            # Substituir a imagem do backend no docker-compose.yml
            sed -i "s|build: .|image: ${{ env.REGISTRY }}/${{ env.BACKEND_IMAGE_NAME }}:latest|" docker-compose.yml

            # Garantir que o Docker Compose está instalado
            if ! [ -x "$(command -v docker-compose)" ]; then
              sudo curl -L "https://github.com/docker/compose/releases/download/v2.20.2/docker-compose-$(uname -s)-$(uname -m)" -o /usr/local/bin/docker-compose
              sudo chmod +x /usr/local/bin/docker-compose
            fi

            # Subir os serviços com o Docker Compose
            docker-compose up -d

            # Validar containers em execução
            docker ps
