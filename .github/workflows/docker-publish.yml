name: Build and Push Docker Images for Backend and Database

on:
  push:
    branches:
      - master
  pull_request:
    branches:
      - master

env:
  REGISTRY: docker.io
  BACKEND_IMAGE_NAME: yuritech/client-management-backend
  DB_IMAGE_NAME: yuritech/mysql-database

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Set up JDK 17
        uses: actions/setup-java@v3
        with:
          distribution: 'adopt'
          java-version: '17'

      - name: Build the backend project using Maven
        run: mvn clean package -DskipTests

      - name: Build and push Backend Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          push: true
          tags: ${{ env.REGISTRY }}/${{ env.BACKEND_IMAGE_NAME }}:latest

      - name: Create Dockerfile for MySQL
        run: |
          echo "FROM mysql:8.0" > Dockerfile-db
          echo "ENV MYSQL_ROOT_PASSWORD=123" >> Dockerfile-db
          echo "ENV MYSQL_DATABASE=client_management" >> Dockerfile-db

      - name: Build and push MySQL Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          file: Dockerfile-db
          push: true
          tags: ${{ env.REGISTRY }}/${{ env.DB_IMAGE_NAME }}:latest

  deploy:
    needs: build
    runs-on: ubuntu-latest

    steps:
      - name: SSH and Deploy to EC2
        uses: appleboy/ssh-action@v0.1.5
        with:
          host: ${{ secrets.AWS_EC2_IP }}
          username: ubuntu
          key: ${{ secrets.AWS_SSH_KEY }}
          script: |
            # Variáveis de ambiente
            BACKEND_IMAGE="${{ env.REGISTRY }}/${{ env.BACKEND_IMAGE_NAME }}:latest"
            DB_IMAGE="${{ env.REGISTRY }}/${{ env.DB_IMAGE_NAME }}:latest"

            # Baixar as novas imagens do Docker Hub
            docker pull $BACKEND_IMAGE
            docker pull $DB_IMAGE

            # Parar e remover contêineres antigos, se existirem
            docker stop backend || true
            docker rm backend || true
            docker stop database || true
            docker rm database || true

            # Subir o banco de dados
            docker run -d --name database -e MYSQL_ROOT_PASSWORD=123 -e MYSQL_DATABASE=client_management -p 3306:3306 $DB_IMAGE

            # Subir o backend
            docker run -d --name backend --link database -p 8080:8080 $BACKEND_IMAGE
